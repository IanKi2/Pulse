import numpy as np
from perlin_noise import PerlinNoise
import random

class Obstacle:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.is_passable = False  # –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –Ω–µ–ø—Ä–æ—Ö–æ–¥–∏–º—ã
        self.kind = "obstacle"

    def __str__(self):
        return "üüß"  # –°–∏–º–≤–æ–ª –¥–ª—è –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è


class Npc:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.kind = "npc"
        self.is_passable = False

    def __str__(self):
        return "üî¥"  # –°–∏–º–≤–æ–ª –¥–ª—è –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è


class Resource:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.kind = "resource"
        self.is_passable = True

    def __str__(self):
        return "üü°"  # –°–∏–º–≤–æ–ª –¥–ª—è –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è


class Agent:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.kind = "agent"
        self.is_passable = False

    def __str__(self):
        return "‚èπÔ∏è"  # –°–∏–º–≤–æ–ª –¥–ª—è –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è


class Cell:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.entity = None  # –°—É—â–Ω–æ—Å—Ç—å –Ω–∞ –∫–ª–µ—Ç–∫–µ

    def __str__(self):
        return str(self.entity) if self.entity else "‚¨õ"

    def add_entity(self, entity):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—É—â–Ω–æ—Å—Ç—å –Ω–∞ –∫–ª–µ—Ç–∫—É"""
        self.entity = entity

    def remove_entity(self):
        """–£–¥–∞–ª—è–µ—Ç —Å—É—â–Ω–æ—Å—Ç—å —Å –∫–ª–µ—Ç–∫–∏"""
        self.entity = None

    def is_passable(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –∫–ª–µ—Ç–∫—É"""
        return self.entity is None or self.entity.is_passable

    def get_cell_properties(self):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏"""
        if self.entity:
            return {
                "x": self.x,
                "y": self.y,
                "kind": self.entity.kind,
                "is_passable": self.entity.is_passable,
            }
        else:
            return {"x": self.x, "y": self.y, "kind": "empty", "is_passable": True}


class GameWorld:
    def __init__(self):

        self.field_size = 5
        self.seed = 42
        self.npc_count = 3
        self.resource_count = 3
        self.obstacle_percent = 30
        self.octaves = 2
        self.noise_scale = 0.15
        self.cells = []  # 2D-–º–∞—Å—Å–∏–≤ –∫–ª–µ—Ç–æ–∫
        self.initialize_world()



    def generate_obstacle_map(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —à—É–º–∞ –ü–µ—Ä–ª–∏–Ω–∞"""
        noise = PerlinNoise(octaves=self.octaves, seed=self.seed)
        noise_map = np.zeros((self.field_size, self.field_size))

        for i in range(self.field_size):
            for j in range(self.field_size):
                noise_map[i][j] = noise([i * self.noise_scale, j * self.noise_scale])

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
        noise_min = np.min(noise_map)
        noise_max = np.max(noise_map)
        normalized_map = (noise_map - noise_min) / (noise_max - noise_min)

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
        threshold = np.percentile(normalized_map, 100 - self.obstacle_percent)
        return (normalized_map > threshold).astype(int)

    def initialize_world(self):
        obstacle_matrix = self.generate_obstacle_map()
        self.cells = [[Cell(i, j) for j in range(self.field_size)] for i in range(self.field_size)]
        
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        all_positions = [(i, j) for i in range(self.field_size) for j in range(self.field_size)]
        random.shuffle(all_positions)
        
        # 1. –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è (—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–µ–π)
        obstacle_positions = []
        for i, j in all_positions[:]:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞
            if obstacle_matrix[i][j] == 1:  # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è [i][j]
                self.cells[i][j].add_entity(Obstacle(i, j))
                obstacle_positions.append((i, j))
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è–º–∏ –∏–∑ –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
        all_positions = [pos for pos in all_positions if pos not in obstacle_positions]
        
        # 2. –î–æ–±–∞–≤–ª—è–µ–º NPC
        npc_positions = random.sample(all_positions, min(self.npc_count, len(all_positions)))
        for i, j in npc_positions:
            self.cells[i][j].add_entity(Npc(i, j))
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ NPC
        all_positions = [pos for pos in all_positions if pos not in npc_positions]
        
        # 3. –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Å—É—Ä—Å—ã
        resource_positions = random.sample(all_positions, min(self.resource_count, len(all_positions)))
        for i, j in resource_positions:
            self.cells[i][j].add_entity(Resource(i, j))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª–∞—Å—Å
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
        all_positions = [pos for pos in all_positions if pos not in resource_positions]
        
        # 4. –î–æ–±–∞–≤–ª—è–µ–º –∞–≥–µ–Ω—Ç–∞
        if all_positions:
            i, j = random.choice(all_positions)
            self.cells[i][j].add_entity(Agent(i, j))

    

    def visualize(self, size=100):
        """–í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç —á–∞—Å—Ç—å –∫–∞—Ä—Ç—ã"""
        print("\n–ö–∞—Ä—Ç–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –º–∏—Ä–∞:")
        for i in range(min(size, self.field_size)):
            for j in range(min(size, self.field_size)):
                print(self.cells[i][j], end=" ")
            print()


    def get_world_properties(self):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏ JSON"""
        properties = {
            "width": self.field_size,
            "height": self.field_size,
            "score": "(count)",
            "respawns": "(count)",
            "agent": [],
            "npcs": [],
            "resourses": [],  # –ö–ª—é—á "resourses" (–≤–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —á–∏—Å–ª–µ)
            "obstacles": []
        }

        for i in range(self.field_size):
            for j in range(self.field_size):
                cell = self.cells[i][j]
                if cell.entity:
                    entity_info = {"x": i, "y": j}  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–µ—Ç–∫–∏
                    kind = cell.entity.kind
                    
                    if kind == "obstacle":
                        properties["obstacles"].append(entity_info)
                    elif kind == "npc":
                        properties["npcs"].append(entity_info)
                    elif kind == "resource":  # –°—É—â–Ω–æ—Å—Ç—å –∏–º–µ–µ—Ç kind="resource"
                        properties["resourses"].append(entity_info)  # –ù–æ –∫–ª—é—á "resourses"
                    elif kind == "agent":
                        properties["agent"].append(entity_info)
        
        return properties

    def get_init_response(self):
        """–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        return {
            "status": "initialized",
            "field_size": self.field_size,
            "tick_interval": self.tick_interval,
            "seed": self.seed,
            "npc_count": self.npc_count,
            "resource_count": self.resource_count,
            "obstacle_percent": self.obstacle_percent,
            "npc_movement": self.npc_movement,
            "agent_vision_radius": self.agent_vision_radius,
        }
    

    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –º–∏—Ä
    world = GameWorld()

    world.visualize()

    print(world.get_world_properties())





