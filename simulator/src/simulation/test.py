import numpy as np
from perlin_noise import PerlinNoise


class Obstacle:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.is_passable = False  # –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –Ω–µ–ø—Ä–æ—Ö–æ–¥–∏–º—ã
        self.kind = "obstacle"

    def __str__(self):
        return "üüß"  # –°–∏–º–≤–æ–ª –¥–ª—è –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è


class Cell:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.entity = None  # –°—É—â–Ω–æ—Å—Ç—å –Ω–∞ –∫–ª–µ—Ç–∫–µ

    def __str__(self):
        return str(self.entity) if self.entity else "‚¨õ"

    def add_entity(self, entity):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—É—â–Ω–æ—Å—Ç—å –Ω–∞ –∫–ª–µ—Ç–∫—É"""
        self.entity = entity

    def remove_entity(self):
        """–£–¥–∞–ª—è–µ—Ç —Å—É—â–Ω–æ—Å—Ç—å —Å –∫–ª–µ—Ç–∫–∏"""
        self.entity = None

    def is_passable(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –∫–ª–µ—Ç–∫—É"""
        return self.entity is None or self.entity.is_passable
    
    def get_cell_properties(self):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏"""
        if self.entity:
            return {
                "x": self.x,
                "y": self.y,
                "kind": self.entity.kind,
                "is_passable": self.entity.is_passable
            }
        else:
            return {
                "x": self.x,
                "y": self.y,
                "kind": "empty",
                "is_passable": True
            }


class GameWorld:
    def __init__(self):
        self.field_size = 5
        self.seed = 42
        self.obstacle_percent = 30
        self.octaves = 2
        self.noise_scale = 0.15
        self.cells = []  # 2D-–º–∞—Å—Å–∏–≤ –∫–ª–µ—Ç–æ–∫

    def generate_obstacle_map(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —à—É–º–∞ –ü–µ—Ä–ª–∏–Ω–∞"""
        noise = PerlinNoise(octaves=self.octaves, seed=self.seed)
        noise_map = np.zeros((self.field_size, self.field_size))

        for i in range(self.field_size):
            for j in range(self.field_size):
                noise_map[i][j] = noise([i * self.noise_scale, j * self.noise_scale])

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
        noise_min = np.min(noise_map)
        noise_max = np.max(noise_map)
        normalized_map = (noise_map - noise_min) / (noise_max - noise_min)

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
        threshold = np.percentile(normalized_map, 100 - self.obstacle_percent)
        return (normalized_map > threshold).astype(int)

    def create_world(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–π –º–∏—Ä —Å –∫–ª–µ—Ç–∫–∞–º–∏ –∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è–º–∏"""
        obstacle_matrix = self.generate_obstacle_map()
        self.cells = []

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É –∫–ª–µ—Ç–æ–∫
        for i in range(self.field_size):
            row = []
            for j in range(self.field_size):
                cell = Cell(i, j)

                # –ï—Å–ª–∏ –≤ –º–∞—Ç—Ä–∏—Ü–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π 1 - —Å–æ–∑–¥–∞–µ–º –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ
                if obstacle_matrix[i][j] == 1:
                    obstacle = Obstacle(i, j)
                    cell.add_entity(obstacle)

                row.append(cell)
            self.cells.append(row)
        return self

    def visualize(self, size=10):
        """–í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç —á–∞—Å—Ç—å –∫–∞—Ä—Ç—ã"""
        print("\n–ö–∞—Ä—Ç–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –º–∏—Ä–∞:")
        for i in range(min(size, self.field_size)):
            for j in range(min(size, self.field_size)):
                print(self.cells[i][j], end=" ")
            print()

    def is_passable_at(self, x, y):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –∫–ª–µ—Ç–∫—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º"""
        if not (0 <= x < self.field_size and 0 <= y < self.field_size):
            return False  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–Ω–µ –º–∏—Ä–∞ - –Ω–µ–ø—Ä–æ—Ö–æ–¥–∏–º—ã

        return self.cells[x][y].is_passable()

    def get_entity_at(self, x, y):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É—â–Ω–æ—Å—Ç—å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º"""
        if not (0 <= x < self.field_size and 0 <= y < self.field_size):
            return None  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–Ω–µ –º–∏—Ä–∞

        return self.cells[x][y].entity

    def remove_entity_at(self, x, y):
        """–£–¥–∞–ª—è–µ—Ç —Å—É—â–Ω–æ—Å—Ç—å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º"""
        if not (0 <= x < self.field_size and 0 <= y < self.field_size):
            return False  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–Ω–µ –º–∏—Ä–∞

        if self.cells[x][y].entity:
            self.cells[x][y].remove_entity()
            return True
        return False
    
    def get_world_properties(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞ –º–∏—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É"""
        properties = {
            "width": self.field_size,
            "height": self.field_size,
            "obstacles": []  # –¢–æ–ª—å–∫–æ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
        }
        
        for x in range(self.field_size):
            for y in range(self.field_size):
                if self.cells[x][y].entity and self.cells[x][y].entity.kind == "obstacle":
                    properties["obstacles"].append({"x": x, "y": y})
        
        return properties



# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –º–∏—Ä
    world = GameWorld().create_world()

    # –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Å—Ç—å –∫–∞—Ä—Ç—ã
    world.visualize(size=10)

    print(world.get_world_properties())

